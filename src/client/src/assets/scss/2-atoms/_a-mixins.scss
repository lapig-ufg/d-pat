@mixin pseudo($el, $position, $orientation) {
    position: relative;

    &:#{$el} {
        content: "";
        position: absolute;

        @if (str-index($position, "bottom")) {
            bottom: 0;
        }

        @if (str-index($position, "top")) {
            top: 0;
        }

        @if (str-index($position, "left")) {
            left: 0;
        }

        @if (str-index($position, "right")) {
            right: 0;
        }

        @if (str-index($position, "center")) {
            @if ($orientation=="horizontal") {
                left: 50%;
                transform: translateX(-50%);
            }

            @if ($orientation=="vertical") {
                top: 50%;
                transform: translateY(-50%);
            }
        }

        @if (not str-index($position, "center") and $orientation=="horizontal") {
            width: 100%;
        }

        @if (not str-index($position, "center") and $orientation=="vertical") {
            height: 100%;
        }

        @content;
    }
}

@mixin proportional-image($proportion) {
    width: 100%;
    padding-top: calc(100% / #{$proportion});
    background-position: center;
    background-size: cover;
}

@mixin reset-foundation-input {

    &,
    &:focus,
    &:active {
        box-shadow: none;
        height: auto;
        text-align: inherit;
    }
}

$tablet-width: 830px;
$desktop-width: 1025px;
$large-width: 1600px;
$medium-width: 1200px;


@mixin mobile {
    @media (max-width: #{$tablet-width - 1px}) {
        @content;
    }
}

@mixin tablet {
    @media (max-width: #{$desktop-width - 1px}) {
        @content;
    }
}

@mixin tablet-only {
    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {
        @content;
    }
}

@mixin desktop {
    @media (min-width: #{$desktop-width}) {
        @content;
    }
}

@mixin large {
    @media (min-width: #{$large-width}) {
        @content;
    }
}

@mixin retina {
    @media only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min--moz-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx) {
        @content;
    }
}

@mixin print {
    @media print {
        @content;
    }
}

@mixin triangle($direction, $sizeH, $sizeV, $color) {
    content: "";
    display: block;
    width: 0;
    height: 0;
    border-style: solid;
    -moz-transform: scale(0.9999);

    @if $direction==top {
        border-width: 0 $sizeV $sizeH $sizeV;
        border-color: transparent transparent $color transparent;
    }

    @if $direction==bottom {
        border-width: $sizeV $sizeH 0 $sizeV;
        border-color: $color transparent transparent transparent;
    }

    @if $direction==left {
        border-width: $sizeV $sizeH $sizeV 0;
        border-color: transparent $color transparent transparent;
    }

    @if $direction==right {
        border-width: $sizeV 0 $sizeV $sizeH;
        border-color: transparent transparent transparent $color;
    }

    @if $direction==topright {
        border-width: 0 $sizeH $sizeV 0;
        border-color: transparent $color transparent transparent;
    }

    @if $direction==bottomright {
        border-width: 0 0 $sizeH $sizeV;
        border-color: transparent transparent $color transparent;
    }

    @if $direction==bottomleft {
        border-width: $sizeH 0 0 $sizeV;
        border-color: transparent transparent transparent $color;
    }

    @if $direction==topleft {
        border-width: $sizeH $sizeV 0 0;
        border-color: $color transparent transparent transparent;
    }
}

$base-size: 16;

//Function to convert px value into rem
//You can replace rem with any other value you want (rem is most preferred value for web)
@function size($target, $context: $base-size) {
    @return ($target / $context) * 1rem;
}

@mixin border-radius($radius) {
    border-radius: $radius;
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
}

@mixin box-shadow($left, $top, $radius, $color) {
    box-shadow: $left $top $radius $color;
    -webkit-box-shadow: $left $top $radius $color;
    -moz-box-shadow: $left $top $radius $color;
}

@mixin transition($property, $duration, $easing: linear) {
    transition: $property $duration $easing;
    -webkit-transition: $property $duration $easing;
    -moz-transition: $property $duration $easing;
}

@mixin opacity($value) {
    $ievalue: $value*100;
    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$ievalue+")";
    filter: alpha(opacity=$ievalue);
}

@mixin fluid-type($min-font-size: 12px, $max-font-size: 21px, $lower-range: 420px, $upper-range: 900px) {

    font-size: calc(#{$min-font-size} + #{(($max-font-size / ($max-font-size * 0 + 1)) - ($min-font-size / ($min-font-size * 0 + 1)))} * ( (100vw - #{$lower-range}) / #{(($upper-range / ($upper-range * 0 + 1)) - ($lower-range / ($lower-range * 0 + 1)))}));

    @media screen and (max-width: $lower-range) {
        font-size: $min-font-size;
    }
    @media screen and (min-width: $upper-range){
        font-size: $max-font-size;
    }
}